import { createClient } from '@supabase/supabase-js';

// Migration type definition
type Migration = {
  name: string;
  up: (supabase: any) => Promise<void>;
  down?: (supabase: any) => Promise<void>;
};

// Get Supabase admin client
const getServiceClient = () => {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://nrxfjvpjxlzamlgbfqqg.supabase.co';
  const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || '';
  
  return createClient(supabaseUrl, serviceKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });
};

// Initialize migrations table
const initMigrationsTable = async (supabase: any) => {
  const { error } = await supabase.rpc('create_table_if_not_exists', {
    table_name: 'migrations',
    table_definition: `
      id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      name TEXT UNIQUE NOT NULL,
      applied_at TIMESTAMPTZ DEFAULT now() NOT NULL
    `
  }).single();
  
  if (error && error.code !== '42P01') {
    // If error is not "table doesn't exist", try direct SQL
    await supabase.from('_sqlj').rpc('execute', {
      query: `
        CREATE TABLE IF NOT EXISTS migrations (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name TEXT UNIQUE NOT NULL,
          applied_at TIMESTAMPTZ DEFAULT now() NOT NULL
        );
      `
    });
  }
};

// Check if migration has been applied
const isMigrationApplied = async (supabase: any, migrationName: string): Promise<boolean> => {
  const { data, error } = await supabase
    .from('migrations')
    .select('name')
    .eq('name', migrationName)
    .maybeSingle();
  
  if (error && error.code === '42P01') {
    // Migrations table doesn't exist yet
    return false;
  }
  
  return !!data;
};

// Record migration as applied
const recordMigration = async (supabase: any, migrationName: string): Promise<void> => {
  await supabase
    .from('migrations')
    .insert({ name: migrationName });
};

// Apply migrations
export const applyMigrations = async (migrations: Migration[]): Promise<{ success: boolean, appliedMigrations: string[], error?: string }> => {
  const supabase = getServiceClient();
  const appliedMigrations: string[] = [];
  
  try {
    // Ensure migrations table exists
    await initMigrationsTable(supabase);
    
    // Apply each migration in sequence if not already applied
    for (const migration of migrations) {
      const isApplied = await isMigrationApplied(supabase, migration.name);
      
      if (!isApplied) {
        await migration.up(supabase);
        await recordMigration(supabase, migration.name);
        appliedMigrations.push(migration.name);
      }
    }
    
    return { 
      success: true, 
      appliedMigrations 
    };
  } catch (error: any) {
    console.error('Migration error:', error);
    return { 
      success: false, 
      appliedMigrations,
      error: error.message 
    };
  }
}; 